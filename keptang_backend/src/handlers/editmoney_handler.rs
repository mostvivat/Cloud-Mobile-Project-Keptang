use actix_web::{put, web, HttpResponse};
use log::{debug, info};
use crate::models::editmoney_model::*;
use crate::models::money_model::*;

// PUT /money/edit/{id}: ‡∏£‡∏±‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå "expense"/"income" ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
#[put("/money/item/{id}")]
async fn put_money(list_id: web::Path<i32>,input_data: web::Json<EditRequest>) -> HttpResponse {
    info!("put money by id");
    debug!("id: {} ü™Ñ", list_id);

    // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ö‡∏ö JSON (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÄ‡∏ï‡∏¥‡∏° mut ‡∏´‡∏•‡∏±‡∏á let)
    let user_data = input_data.into_inner();
    let id: i32 = list_id.to_string().parse().unwrap();
    let types_edit = user_data.data_item.types;
    let types_new = types_edit.clone();
    
    
    let mut types_old:String = "".to_string();
    let mut amount_old = 0;
    let amount_new = user_data.data_item.amount;

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ amount
    let data = get_moneylist_byid(user_data.UserData.user_id,id);
        for i in data {
            types_old = i.types;
            amount_old = i.amount;
        }
    
    // ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏±‡πà‡∏ß type ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    if types_old.to_string() == "income"{
        types_old = "expenses".to_string();
    }else{
        types_old = "income".to_string();
    }
    // debug!("‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô ü™Ñ");
    // debug!("amount_old: {} ü™Ñ", amount_old);
    // debug!("types: {} ü™Ñ", types_old);
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°
    edit_balance_total(user_data.UserData.user_id,amount_old,types_old);

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
    edit_money(user_data.UserData.user_id,
        id,
        user_data.data_item.description,
        user_data.data_item.date,
        user_data.data_item.amount,
        types_edit);


    // debug!("‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà ü™Ñ");
    // debug!("amount_old: {} ü™Ñ", amount_new);
    // debug!("types: {} ü™Ñ", types_new);

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    edit_balance_total(user_data.UserData.user_id,amount_new,types_new);

    HttpResponse::Ok().body("‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏àüëå")
}