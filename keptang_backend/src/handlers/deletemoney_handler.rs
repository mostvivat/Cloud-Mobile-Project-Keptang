use actix_web::{delete, web, HttpResponse};
use log::{debug, info};
use crate::models::deletemoney_model::*;
use crate::models::editmoney_model::*;
use crate::models::money_model::*;


// DELETE /money/delete/{id}: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏ß‡∏¢ list_id ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
#[delete("/money/item/{id}")]
async fn delete_money(list_id: web::Path<i32>,input_data: web::Json<DeleteRequest>) -> HttpResponse {
    info!("delete money by list_id");
    debug!("list_id: {} ‚ùå", list_id);

    // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏ö‡∏ö JSON (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÄ‡∏ï‡∏¥‡∏° mut ‡∏´‡∏•‡∏±‡∏á let)
    let user_id = input_data.into_inner();
    let id: i32 = list_id.to_string().parse().unwrap();
    let mut types:String = "".to_string();
    let mut amount = 0;

    let data = get_moneylist_byid(user_id.user_id,id);
    for i in data {
        types = i.types;
        amount = i.amount;
    }
    // debug!("------------------------------------------ ");
    // debug!("types: {} ", types);
    // debug!("amount: {} ", amount);
    
    // ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏±‡πà‡∏ß type ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    if types.to_string() == "income"{
        types = "expenses".to_string();
    }else{
        types = "income".to_string();
    }
    edit_balance_total(user_id.user_id,amount,types);
    delete_money_db(user_id.user_id,id);


    HttpResponse::Ok().body("‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏àüëå")
}
